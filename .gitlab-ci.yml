stages:
  # - test
  # - pact-publish
  - dockerize
  - deploy2test
  - deploy2production


# test project:
#   stage: test
#   image: node:16
#   script:
#     - npm -v
#     - npm install npm@8.5.0 -g
#     - npm i
#     - npm run test-component
#     - npm run test-contract

# publish pact broker:
#   stage: pact-publish
#   image:
#     name: pactfoundation/pact-cli:latest
#     entrypoint: [""]
#   variables:
#     PACT_BROKER_CHECK_FOR_POTENTIAL_DUPLICATE_PACTICIPANT_NAMES : "false"
#   script:
#     - pact-broker create-or-update-pacticipant pact/pacts 
#         --name "TodoFrontend"
#         --consumer-app-version=$CI_COMMIT_SHORT_SHA 
#         --tag=$CI_COMMIT_REF_NAME 
#         --broker-base-url=$PACT_BROKER_BASE_URL 
#         --broker-token=$PACT_BROKER_TOKEN

# Dockerize the application and push the aws ecr registry
dockerize:
  stage: dockerize
  image: 
    name: docker:latest
  services:
    - docker:19-dind
  before_script:
    - apk add --no-cache curl jq python3 py3-pip
    - pip install awscli
  script:
    - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_SECRET_ACCESS_KEY.dkr.ecr.$AWS_REGION.amazonaws.com
    - docker build -t $AWS_ECR_REGISTRY/todo-app:$CI_PIPELINE_IID .
    - docker push $AWS_ECR_REGISTRY/todo-app:$CI_PIPELINE_IID

# Deploy the docker image to aws ecs test envirounment
deploy2test:
  stage: deploy2test
  image: amazon/aws-cli:latest
  script:
    - aws ecs update-service --cluster $AWS_ECS_CLUSTER_NAME --service $AWS_ECS_SERVICE_NAME_TEST --force-new-deployment --region $AWS_REGION


# Deploy the docker image to aws ecs production envirounment
deploy2production:
  stage: deploy2production
  image: amazon/aws-cli:latest
  script:
    - aws ecs update-service --cluster $AWS_ECS_CLUSTER_NAME --service $AWS_ECS_SERVICE_NAME_PRODUCTION --force-new-deployment --region $AWS_REGION