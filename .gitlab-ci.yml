stages:
  # - test
  # - pact-publish
  - dockerize
  - deploy2test
  - deploy2production


# test project:
#   stage: test
#   image: node:16
#   script:
#     - npm -v
#     - npm install npm@8.5.0 -g
#     - npm i
#     - npm run test-component
#     - npm run test-contract

# publish pact broker:
#   stage: pact-publish
#   image:
#     name: pactfoundation/pact-cli:latest
#     entrypoint: [""]
#   variables:
#     PACT_BROKER_CHECK_FOR_POTENTIAL_DUPLICATE_PACTICIPANT_NAMES : "false"
#   script:
#     - pact-broker create-or-update-pacticipant pact/pacts 
#         --name "TodoFrontend"
#         --consumer-app-version=$CI_COMMIT_SHORT_SHA 
#         --tag=$CI_COMMIT_REF_NAME 
#         --broker-base-url=$PACT_BROKER_BASE_URL 
#         --broker-token=$PACT_BROKER_TOKEN

# Dockerize the application and push the heroku container registry
dockerize:
  stage: dockerize
  script:
    - apk add --no-cache curl jq python py-pip
    - pip install awscli
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set region $AWS_DEFAULT_REGION
    - $(aws ecr get-login --no-include-email --region "${AWS_DEFAULT_REGION}")
    - IMAGE_TAG="$(echo $CI_COMMIT_SHA | head -c 8)"
    - echo "Building image..."
    - docker build -t $AWS_REPOSITORY_URL:latest .
    - echo "Tagging image..."
    - docker tag $AWS_REPOSITORY_URL:latest $AWS_REPOSITORY_URL:$IMAGE_TAG
    - echo "Pushing image..."
    - docker push $AWS_REPOSITORY_URL:latest
    - docker push $AWS_REPOSITORY_URL:$IMAGE_TAG
  only:
  - main
# Deploy the dockerized application to heroku test envirounment
deploy2test:
  stage: deploy2test
  image: docker:latest
  services:
    - docker:dind
  script:
    - apk add --no-cache curl jq python py-pip
    - pip install awscli
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set region $AWS_DEFAULT_REGION
    - $(aws ecr get-login --no-include-email --region "${AWS_DEFAULT_REGION}")
    - IMAGE_TAG="$(echo $CI_COMMIT_SHA | head -c 8)"

    - echo $AWS_REPOSITORY_URL:$IMAGE_TAG
    - TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition "$TASK_DEFINITION_NAME" --region "${AWS_DEFAULT_REGION}")
    - NEW_CONTAINER_DEFINTIION=$(echo $TASK_DEFINITION | jq --arg IMAGE "$AWS_REPOSITORY_URL:$IMAGE_TAG" '.taskDefinition.containerDefinitions[0].image = $IMAGE | .taskDefinition.containerDefinitions[0]')
    - echo "Registering new container definition..."
    - aws ecs register-task-definition --region "${AWS_DEFAULT_REGION}" --family "${TASK_DEFINITION_NAME}" --container-definitions "${NEW_CONTAINER_DEFINTIION}"
    - echo "Updating the service..."
    - aws ecs update-service --region "${AWS_DEFAULT_REGION}" --cluster "${CLUSTER_NAME}" --service "${SERVICE_NAME}"  --task-definition "${TASK_DEFINITION_NAME}"
  only:
    - master

# Deploy the dockerized application to heroku production envirounment
deploy2production:
  stage: deploy2production
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker login --username=_ --password=$HEROKU_API_KEY registry.heroku.com
    - docker pull registry.heroku.com/$HEROKU_APP_NAME/web
    - docker tag registry.heroku.com/$HEROKU_APP_NAME/web registry.heroku.com/$HEROKU_APP_NAME-production/web
    - docker login --username=_ --password=$HEROKU_API_KEY registry.heroku.com
    - docker push registry.heroku.com/$HEROKU_APP_NAME-production/web:latest
    - heroku container:release web --app $HEROKU_APP_NAME-production