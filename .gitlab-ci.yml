stages:
  - test
  - pact-publish
  - dockerize
  - deploy2test
  - deploy2production


# test project:
#   stage: test
#   image: node:16
#   script:
#     - npm -v
#     - npm install npm@8.5.0 -g
#     - npm i
#     - npm run test-component
#     - npm run test-contract

dockerize:
  stage: dockerize
  image: docker:latest
  services:
    - docker:dind
  before_script:
    # login to heroku container registry
    - docker login registry.heroku.com -u _ -p $HEROKU_API_KEY
  script:
    - docker build -t registry.heroku.com/$HEROKU_APP_NAME/web .
    - docker push registry.heroku.com/$HEROKU_APP_NAME/web
    
    

# deploy to heroku test environment
deploy to test:
  stage: deploy2test
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker login -u _ -p $HEROKU_API_KEY registry.heroku.com
    - docker pull registry.heroku.com/$HEROKU_APP_NAME/web
    - docker tag registry.heroku.com/$HEROKU_APP_NAME/web registry.heroku.com/$HEROKU_APP_NAME-test/web
    - docker push registry.heroku.com/$HEROKU_APP_NAME-test/web
    - docker run --rm  -e HEROKU_API_KEY=$HEROKU_API_KEY wingrunr21/alpine-heroku-cli container:release web --app $HEROKU_APP_NAME-test

# deploy to heroku production environment
deploy to production:
  stage: deploy2production
  image: docker:latest
  services:
    - docker:dind
  script:
    - curl https://cli-assets.heroku.com/install-ubuntu.sh | sh
    - docker login -u _ -p $HEROKU_API_KEY registry.heroku.com
    - heroku container:login
    - docker pull registry.heroku.com/$HEROKU_APP_NAME/web
    - docker tag registry.heroku.com/$HEROKU_APP_NAME/web registry.heroku.com/$HEROKU_APP_NAME-prod/web
    - docker push registry.heroku.com/$HEROKU_APP_NAME-prod/web 
    - heroku container:release web -a $HEROKU_APP_NAME-prod